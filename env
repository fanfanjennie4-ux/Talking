require('dotenv').config();
const mongoose = require('mongoose');
const User = require('./models/User');
const Room = require('./models/Room');

const MONGO_URI = process.env.MONGO_URI;
const OWNER_EMAIL = process.env.OWNER_EMAIL;
const OWNER_PASSWORD = process.env.OWNER_PASSWORD;
const ROOMS_DEFAULT = process.env.ROOMS_DEFAULT ? process.env.ROOMS_DEFAULT.split(',') : [];

async function init() {
  try {
    await mongoose.connect(MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('Connect√© √† MongoDB ‚úÖ');

    // V√©rifier si l‚Äôowner existe d√©j√†
    let owner = await User.findOne({ email: OWNER_EMAIL });
    if (!owner) {
      owner = new User({
        email: OWNER_EMAIL,
        pseudo: 'Owner',
        password: OWNER_PASSWORD,
        role: 'owner',
        verified: true,
      });
      await owner.save();
      console.log('Utilisateur owner cr√©√© ‚úÖ');
    } else {
      console.log('Utilisateur owner d√©j√† existant ‚ö†Ô∏è');
    }

    // Cr√©er les salons par d√©faut
    for (const roomName of ROOMS_DEFAULT) {
      const existingRoom = await Room.findOne({ name: roomName.trim() });
      if (!existingRoom) {
        const room = new Room({
          name: roomName.trim(),
          topic: 'Salon par d√©faut',
          is_private: false,
          is_age_restricted: false,
          created_by: owner._id,
        });
        await room.save();
        console.log(`Salon cr√©√©: ${roomName} ‚úÖ`);
      } else {
        console.log(`Salon d√©j√† existant: ${roomName} ‚ö†Ô∏è`);
      }
    }

    console.log('Initialisation termin√©e üéâ');
    process.exit(0);
  } catch (error) {
    console.error('Erreur lors de l‚Äôinitialisation:', error);
    process.exit(1);
  }
}

init();